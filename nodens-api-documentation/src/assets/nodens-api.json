{
  "openapi" : "3.0.3",
  "info":{
    "title" : "Nodens API - Swagger UI",
    "description" : " This is the API Documentation for Nodens.\nAll the routes and Schemas can change until a first version of the proyect in production.Even this file.\nRepo Links:\n- [Nodens Backend](https://github.com/moises-ph/Nodens_Backend)\n- [Nodens Frontend](https://github.com/moises-ph/Nodens_Frontend)\n",
    "version" : "0.1.0",
    "termsOfService" : "http://swagger.io/terms/"
  },
  "servers": [
    {"url": "https://nodensapim.azure-api.net"}
  ],
  "tags" : [
    {
      "name" : "Auth",
      "description" : "Authentication Service in Nodens"
    },
    {
      "name" : "Musicians",
      "description" : "Service to Manage Musicians Service"
    },
    {
      "name" : "Organizers",
      "description" : "Service to Manage Organizers Service"
    },
    {
      "name" : "Offers",
      "description" : "Service to publish Offers and aplicate to them"
    },
    {
      "name": "Mailer",
      "description": "Service to send mails on some events in the application"
    },
    {
      "name": "Posts",
      "description": "Service to manage user's posts"
    }
  ],
  "components" : {
    "securitySchemes" : {
      "Authentication" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  },
  "paths" : {
    "/auth/api/auth/login" : {
      "post" : {
        "tags" : ["Auth"],
        "summary" : "Log in Nodens",
        "description" : "Get Credentials for logining in Nodens, in the field renewToken sends an Token to renew the auth token after 15 minutes",
        "requestBody" : {
          "description" : "The requested data to Log In",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "email" : { "type" : "string" },
                  "password" : { "type" : "string" }
                },
                "required" : ["email", "password"]
              },
              "examples" : {
                "user" : {
                  "summary" : "User Login example",
                  "value" : {
                    "email" : "you@email.com",
                    "password" : "yourStrongPassword"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Succesful Login",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "token" : { "type" : "string" },
                    "verified" : { "type" : "boolean" },
                    "username" : { "type" : "string" },
                    "renewToken" : { "type" : "string" }
                  },
                  "example" : {
                    "token" : "theAuthTokenGoesHere",
                    "verified" : "true",
                    "username" : "User1234"                  
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Wrong Password or an Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "token" : { "type" : "string" },
                    "message" : { "type" : "string" }
                  },
                  "example" : {
                    "token" : "",
                    "message" : "Contraseña Incorrecta"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/api/auth/renew" : {
      "put" : {
        "tags" : ["Auth"],
        "summary" : "Renew Authentication token",
        "description" : "Renew the token (The token expires at 15 minutes). In headers has to send the renewToken given in Login in the 'Authorization' field",
        "parameters" : [
          {
            "name" : "token", 
            "in" : "query",
            "schema" : {
              "type": "string"
            }
          }
        ],
        "responses" : {
          "401" : {
            "description" : "Invalid Cookies or Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "token" : { "type" : "string" },
                    "message" : { "type" : "string" }
                  },
                  "example" : {
                    "token" : "",
                    "message" : "Invalid Cookies"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/api/auth/recovery/pre" : {
      "post" : {
        "tags" : ["Auth"],
        "summary" : "Recovery Password: 1° Step",
        "description" : "This is the first step to recovery the password, here you request a change to the password.\nThe system creates a session of 30 minutes to change the password, after that time the user will have to do the request another time",
        "parameters" : [
          {
            "name" : "Email",
            "in" : "query",
            "schema" : {
              "type": "string"
            }
          }
        ],
        "responses" : {
          "404" : {
            "description" : "The Email given was not found, the user doesn't exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Message" : { "type" : "string" }
                  },
                  "example" : {
                    "Message" : "Usuario no registrado"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "No Email was sent or is invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Message" : { "type" : "string" }
                  },
                  "example" :{
                    "Message" : "Email no válido"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Message" : { "type" : "string" }
                  },
                  "example" :{
                    "Message" : "Some error"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Succesful request to recovery the password",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "guid" : { "type" : "string" },
                    "Email" : { "type" : "string" },
                    "email" : { "type" : "string" },
                    "source" : { "type" : "object" },
                    "timestamp" : { "type" : "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/api/auth/recovery/request" : {
      "post" : {
        "tags" : ["Auth"],
        "summary" : "Recovery Password: 2° Step",
        "description" : "This is the second step to recovery the password, here you recieve the token to change the password.",
        "parameters" : [
          {
            "name" : "gdusr",
            "in" : "query",
            "schema" : {
              "type": "string"
            }
          },
          {
            "name" : "mn",
            "in" : "query",
            "schema" : {
              "type": "string"
            }
          }
        ],
        "responses" : {
          "401" : {
            "description" : "The Session expired, the credentials ar not valid or an Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "msg" : { "type" : "string" }
                  },
                  "example" : {
                    "msg" : "Url Expirada, por favor vuelva a pedir el restablecimiento de contraseña"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Succesful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "token" : { "type" : "string" },
                    "upResult" : { "type" : "string" }
                  },
                  "example" : {
                    "token" : "theRecoveryTokenGoesHere",
                    "upResult" : "thisIsTheResult.YouCanIgnoreIt"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/api/auth/recovery/reset" : {
      "put" : {
        "tags" : ["Auth"],
        "summary" : "Recovery Password: 3° Step",
        "description" : "This is the las step, here you send the token given in the step before in the headers like an authentication, and send the password in the URL Query",
        "parameters" : [
          {
            "name" : "pass",
            "in" : "query",
            "schema" : {
              "type": "string"
            }
          }
        ],
        "requestBody" :{
          "description": "Body to change the password",
          "content": {
            "applicatio/json" : {
              "schema" : {
                "type": "object",
                "properties": {
                  "Password" : { "type": "string" }
                },
                "required": ["Password"]
              }
            }
          }
        },
        "responses" : {
          "404" : {
            "description" : "The URL Expired, the session is running up until the password changes (this step)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "msg" : { "type" : "string" }
                  },
                  "example" : {
                    "msg" : "Url expirada, por favor vuelva a pedir el restablecimiento de contraseña"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The step before wasn't done or the credentials are not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "msg" : { "type" : "string" }
                  },
                  "example" : {
                    "msg" : "Vuelva a solicitar el restablecimiento de su contraseña"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "There was an error tring to change the password (all the validations at this point are correct)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Message" : { "type" : "string" }
                  },
                  "example" : {
                    "Message" : "Some error"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "The password where successfully changed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Message" : { "type" : "string" }
                  },
                  "example" : {
                    "Message" : "Contraseña cambiada correctamente"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "There was an Unexpected Error during the process",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Message" : { "type" : "string" }
                  },
                  "example" : {
                    "Message" : "Some Unexpected error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/api/auth/verify" : {
      "put" : {
        "tags" : ["Auth"],
        "summary" : "Verify the Email",
        "description" : "This URL normally is sended to the email, but it's also in the response when the user get register in the platform. Here you send some credentials to validate the Email, the credentials expires in 1 hour",
        "parameters" : [
          {
            "name" : "em",
            "in" : "query",
            "schema" : {
              "type": "string"
            }
          },
          {
            "name" : "guid",
            "in" : "query",
            "schema" : {
              "type": "string"
            }
          }
        ],
        "responses" : {
          "404" : {
            "description" : "The URL Expired, basically the credentials exired after 1 hour",
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "Message" : { "type" : "string" }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Message" : { "type" : "string" }
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Succesful Verification of the User",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Message" : { "type" : "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/api/auth/verify/req" : {
      "post" : {
        "tags" : ["Auth"],
        "summary" : "Request a Verification for the Email",
        "description" : "Request a new Verification Link to Verify the User, usually this happens when the URL Sended when Register expires",
        "requestBody" : {
          "description" : "The Email for Request a Verification URL",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "email" : { "type" : "string" }
                },
                "required" : ["email"]
              },
              "examples" : {
                "user" : {
                  "summary" : "An Email to verify",
                  "value" : {
                    "email" : "you@email.com"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "404" : {
            "description" : "The Email or the User doesn't exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Message" : { "type" : "string" }
                  },
                  "example" : {
                    "Message" : "El usuario no existe, por favor regístrese"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Succesful Verification Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "url" : { "type" : "string", "description" : "The New URL to Verify" },
                    "Message" : { "type" : "string" }
                  },
                  "example" : {
                    "url" : "http://url.com/api/auth/verify?TheCredentials",
                    "Message" : "Verificación de email solicitada correctamente, vaya al enlace"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Message" : { "type" : "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/api/user/{id}" : {
      "get" : {
        "tags" : ["Auth"],
        "summary" : "Get the information of the User",
        "description" : "Get the information of the User, you can send the email, the username or the Id on the url param to get that User",
        "responses" : {
          "200" : {
            "description" : "The User",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Email" : { "type" : "string" },
                    "userName" : { "type" : "string" },
                    "Rol" : { "type" : "string" },
                    "verified" : { "type" : "boolean" }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Message" : { "type" : "string" }
                  },
                  "example" : {
                    "Message" : "Some error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/api/user/Register" : {
      "post" : {
        "tags" : ["Auth"],
        "summary" : "Register in Nodens",
        "description" : "Route to register an User in Nodens, only required information to authenticate.",
        "requestBody" : {
          "description" : "Requested data to register an User in Nodens, it requires a Rol that will determinate the rest of the information for the User.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "email": { "type" : "string" },
                  "userName": { "type" : "string" },
                  "rol": { "type" : "string" },
                  "password": { "type" : "string" }
                }
              }
            }
          }
        },
        "responses" : {
          "400" : {
            "description" : "Unexpected Error while saving the user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Message" : { "type" : "string" }
                  },
                  "example" : {
                    "Message" : "Some error"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Succesful Register",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Message" : { "type" : "string" },
                    "url" : { "type" : "string" }
                  },
                  "example" : {
                    "Message" : "Usuario registrado correctamente",
                    "url" : "hereGoesTheUrlToVerifyTheEmail"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Message" : { "type" : "string" }
                  },
                  "example" : {
                    "Message" : "Some error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/api/user/update" : {
      "put" : {
        "tags" : ["Auth"],
        "summary" : "Update User",
        "description" : "Update the User info, the Authentication token is required",
        "requestBody" : {
          "description" : "The Information for Update",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "userName" : { "type" : "string" },
                  "OldEmail" : { "type" : "string", "description" : "The old email used for the user" },
                  "NewEmail" : { "type" : "string", "description" : "The new email for the user, if the user doesn't want to change his Email, this field can be the same or null" }
                }
              },
              "examples" : {
                "Update with another email":{
                  "value" : {
                    "userName" : "newUserName12345",
                    "OldEmail" : "something@email.com",
                    "NewEmail" : "newemail@email.com"
                  }
                },
                "Update with same email" : {
                  "value" : {
                    "userName" : "newUserName12345",
                    "OldEmail" : "something@email.com",
                    "NewEmail" : "something@email.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200" : {
            "description": "Succesful update",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "Mesage" : { "type": "string" }
                  }
                }
              }
            }
          },
          "500" : {
            "description": "Unexpected Error",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "Message" : { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/musicians/musician/all" : {
      "get" : {
        "tags" : ["Musicians"],
        "summary" : "Get all Musicians",
        "description" : "All Musicians in platform",
        "responses" : {
          "200" : {
            "description" : "Succesful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "IdAuth" : { "type" : "integer", "description" : "ID in the Auth Service"  },
                    "Name" :  { "type" : "string", "description" : "Name of the Musician"  },
                    "Lastname" : { "type" : "string", "description" : "Lastname of the Musician"  },
                    "fecha_nacimiento" : { "type" : "string", "format" : "date" ,"description" : "Date of birth of the Musician"  },
                    "instrumentos" : { 
                      "type" : "array", 
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "nombre" : { "type" : "string", "description" : "The name of the instrument"},
                          "nivel" : { "type" : "string", "description" : "A description of the Musician's level on that one instrument"}
                        }
                      },
                      "description" : "An array of the Instruments that the Musician knows to play"
                    },
                    "genero" : { "type" : "string", "description" : "The gender of the Musician"  },
                    "description" : { "type" : "string", "description" : "A description of the Musician"  },
                    "generosMusicales" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "An array with the Musician genres that the Musician knows to play"
                    },
                    "pais" : { "type" : "string", "description" : "Country of the Musician"  },
                    "ciudad" : { "type" : "string", "description" : "City of the Musician"  },
                    "experiencia" : { "type" : "string", "description" : "A Description of the general experience in Music of the Musician"  },
                    "educacion" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "nombre" : { "type" : "string", "description" : "Name of the degree"},
                          "institucion" : { "type" : "string", "description" : "Name of the institutin where the Musician did the degree"  },
                          "fecha_inicio" : { "type" : "string", "format" : "date", "description" : "Date when the Musician started to study the degree"  },
                          "fecha_fin" : { "type" : "string", "format" : "date", "description" : "Date when the Musician finished the degree" }
                        }
                      }
                    },
                    "url_foto_perfil" : { "type" : "string", "description" : "URL for the profile img of the Musician"},
                    "url_video_presentacion" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "An Array with the url for the videos of the Musician"
                    },
                    "redes_sociales" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "nombre" : { "type" : "string" , "description" : "Name of the Social media" },
                          "url" : { "type" : "string", "description" : "URL to the Social Media" }
                        }
                      },
                      "description" : "An Array with the url for the videos of the Musician"
                    },
                    "telefono" : { "type" : "string" , "description" : "Phone of the Musician" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/musicians/musician/{id}" : {
      "get" : {
        "tags" : ["Musicians"],
        "summary": "Get a Musician by his Id",
        "description": "Get One Musician with his ObjectID",
        "parameters": [
          {
            "in": "path",
            "name" : "id",
            "schema" : {
              "type": "string" 
            },
            "required": true
          }
        ],
        "responses": {
          "200" : {
            "description" : "Succesful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "IdAuth" : { "type" : "integer", "description" : "ID in the Auth Service"  },
                    "Name" :  { "type" : "string", "description" : "Name of the Musician"  },
                    "Lastname" : { "type" : "string", "description" : "Lastname of the Musician"  },
                    "fecha_nacimiento" : { "type" : "string", "format" : "date" ,"description" : "Date of birth of the Musician"  },
                    "instrumentos" : { 
                      "type" : "array", 
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "nombre" : { "type" : "string", "description" : "The name of the instrument"},
                          "nivel" : { "type" : "string", "description" : "A description of the Musician's level on that one instrument"}
                        }
                      },
                      "description" : "An array of the Instruments that the Musician knows to play"
                    },
                    "genero" : { "type" : "string", "description" : "The gender of the Musician"  },
                    "description" : { "type" : "string", "description" : "A description of the Musician"  },
                    "generosMusicales" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "An array with the Musician genres that the Musician knows to play"
                    },
                    "pais" : { "type" : "string", "description" : "Country of the Musician"  },
                    "ciudad" : { "type" : "string", "description" : "City of the Musician"  },
                    "experiencia" : { "type" : "string", "description" : "A Description of the general experience in Music of the Musician"  },
                    "educacion" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "nombre" : { "type" : "string", "description" : "Name of the degree"},
                          "institucion" : { "type" : "string", "description" : "Name of the institutin where the Musician did the degree"  },
                          "fecha_inicio" : { "type" : "string", "format" : "date", "description" : "Date when the Musician started to study the degree"  },
                          "fecha_fin" : { "type" : "string", "format" : "date", "description" : "Date when the Musician finished the degree" }
                        }
                      }
                    },
                    "url_foto_perfil" : { "type" : "string", "description" : "URL for the profile img of the Musician"},
                    "url_video_presentacion" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "An Array with the url for the videos of the Musician"
                    },
                    "redes_sociales" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "nombre" : { "type" : "string" , "description" : "Name of the Social media" },
                          "url" : { "type" : "string", "description" : "URL to the Social Media" }
                        }
                      },
                      "description" : "An Array with the url for the videos of the Musician"
                    },
                    "telefono" : { "type" : "string" , "description" : "Phone of the Musician" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/musicians/musician/" : {
      "get" : {
        "tags" : ["Musicians"],
        "summary" : "Musician Login",
        "description" : "The GET route verifies access permission with an authentication token. If the permission is valid, it returns information about a musician. If not, it returns an error message",
        "responses" : {
          "200" : {
            "description" : "Succesful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "IdAuth" : {"type" : "integer", "description" : "ID in the Auth Service"},
                    "Name" : {"type" : "string", "description" : "The name of the instrument"},
                    "Lastname" : {"type" : "string", "description" : "Lastname of the Musician"},
                    "fecha_nacimiento" : {"type" : "string", "format" : "date", "description" : "Date of birth of the Musician"},
                    "instrumentos" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "nombre" : {"type" : "string", "description" : "The name of the instrument"},
                          "nivel" : {"type" : "string", "description": "A description of the Musician's level on that one instrument"}
                        }
                      },
                      "description" : "An array of the Instruments that the Musician knows to play"
                    },
                    "genero" : {"type" : "string", "description" : "The gender of the Musician"},
                    "description" : {"type":"string","description":"A description of the Musician"},
                    "generosMusicales" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "An array with the Musician genres that the Musician knows to play"
                    },
                    "pais" : {"type" : "string", "description" : "Country of the Musician"},
                    "ciudad" : {"type" : "string", "description": "City of the Musician"},
                    "experiencia" :{"type" : "string", "description": "A Description of the general experience in Music of the Musician"},
                    "educacion" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "nombre" : {"type" : "string", "description" : "Name of the degree"},
                          "institucion" : {"type" : "string", "description" : "Name of the institutin where the Musician did the degree"},
                          "fecha_inicio" : { "type" : "string", "format" : "date", "description" : "Date when the Musician started to study the degree"  },
                          "fecha_fin" : { "type" : "string", "format" : "date", "description" : "Date when the Musician finished the degree" }
                        }
                      }
                    },
                    "url_foto_perfil" : {"type":"string","description":"URL for the profile img of the Musician"},
                    "url_video_presentacion" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "An Array with the url for the videos of the Musician"
                    },
                    "redes_sociales" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "nombre" : { "type" : "string" , "description" : "Name of the Social media" },
                          "url" : { "type" : "string", "description" : "URL to the Social Media" }
                        }
                      },
                      "description" : "An Array with the url for the videos of the Musician"
                    },
                    "telefono" : {"type" : "string" , "description" : "Phone of the Musician"}    
                  }  
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : ["Musicians"],
        "summary" : "Create Musician Information",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "IdAuth" : {"type" : "integer", "description" : "ID in the Auth Service"},
                  "Name" : {"type" : "string", "description" : "Name of the Musician"},
                  "Lastname" : {"type" : "string", "description" : "Lastname of the Musician"},
                  "fecha_nacimiento" : {"type" : "string", "format" : "date" ,"description" : "Date of birth of the Musician"},
                  "instrumentos" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "nombre" : {"type" : "string", "description" : "The name of the instrument"},
                        "nivel" : {"type" : "string", "description" : "A description of the Musician level on that one instrument"}
                      }
                    },
                    "description" : "An array of the Instruments that the Musician knows to play"
                  },
                  "genero" : {"type" : "string", "description" : "The gender of the Musician"},
                  "description" : {"type" : "string", "description" : "A description of the Musician"},
                  "generosMusicales" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "An array with the Musician genres that the Musician knows to play"
                  },
                  "pais" : {"type" : "string", "description" : "Country of the Musician"},
                  "ciudad" : {"type" : "string", "description" : "City of the Musician" },
                  "experiencia" : {"type" : "string", "description" : "A Description of the general experience in Music of the Musician"},
                  "educacion" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "nombre" : {"type" : "string", "description" : "Name of the degree"},
                        "institucion" : {"type" : "string", "description" : "Name of the institutin where the Musician did the degree"},
                        "fecha_inicio" : { "type" : "string", "format" : "date", "description" : "Date when the Musician started to study the degree"  },
                        "fecha_fin" : { "type" : "string", "format" : "date", "description" : "Date when the Musician finished the degree" }
                      }
                    }
                  },
                  "url_foto_perfil" : {"type":"string","description":"URL for the profile img of the Musician"},
                  "url_video_presentacion" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "An Array with the url for the videos of the Musician"
                  },
                  "redes_sociales" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "nombre" : { "type" : "string" , "description" : "Name of the Social media" },
                        "url" : { "type" : "string", "description" : "URL to the Social Media" } 
                      }
                    },
                    "description" : "An Array with the url for the videos of the Musician"
                  },
                  "telefono" : {"type" : "string", "description" : "Phone of the Musician"}
                }
              }
            }
          }
        },
        "description" : "The POST route verifies access permission with an authentication token. If the permission is valid, it post information about a musician. If not, it returns an error message",
        "responses" : {
          "200" : {
            "description" : "Succesful Post",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "message" : { "type" : "string" }
                  },
                  "example" : {
                    "message" : "Información del musico creada correctamente"
                  }
                }
              }
            }  
          }
        }
      },
      "delete" : {
        "tags" :["Musicians"],
        "summary" : "Musician delete",
        "description" : "The PUT route verifies the access permission with an auth token and the id. If the permission is valid, it will delete the musician",
        "responses" : {
          "200" : {
            "description" : "Succesful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "IdAuth" : {"type" : "integer", "description" : "ID in the Auth Service"}
                  }
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : ["Musicians"],
        "summary" : "Musician Put",
        "description" : "The PUT route verifies access permission with an authentication token. If the permission is valid, it update information about a musician. If not, it returns an error message",
        "parameters" : [
          {
            "name" : "token",
            "in" : "query",
            "schema" : {
              "type": "string"
            }
          }
        ],
        "responses" : {
          "401" : {
            "description" : "Invalid Cookies or Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "token" : {"type" : "string"},
                    "message" : {"type" : "string"}
                  },
                  "example" : {
                    "token" : "",
                    "message" : "Invalid Cookies"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/musicians/musician/uploadVideo" : {
      "post" : {
        "tags" : ["Musicians"],
        "summary" : "Upload Videos or Images to Musician's profile",
        "description" : "This route requires Auth Token in headers and multipart/form-data mimetype in Headers also. Send a tuple with key of the video or image and the file in the body (the key can be whatever, it doesn't affect the process). \n Also can take several seconds or even minutes to response.",
        "responses" : {
          "400" : {
            "description" : "MIME Type Error or not authorized Rol",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "message" : { "type" : "string" }
                  },
                  "example" : {
                    "message" : "No valid MIME Type for content"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Succesful Post",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "message" : {"type" : "string"}
                  },
                  "example" : {
                    "message" : "Ok"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/musicians/musician/profile" : {
      "post" : {
        "tags" : ["Musicians"],
        "summary" : "Post Musician's profile",
        "description" : "This route requires Auth Token in headers and multipart/form-data mimetype in Headers also. Send a tuple with only one value: key of the image and the file in the body (the key can be whatever, it doesn't affect the process). \n Also can take several seconds or even minutes to response.",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" :"array",
                  "items" : {}
                }
              }
            }
          }
        },
        "responses": {
          "200" : {
            "description": "Succesful profile Upload or Update of the Musician",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "message" : { "type": "string" }
                  },
                  "example" : {
                    "message" : "Foto de perfil actualizada correctamente"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "MIME Type Erro or not authorized Rol",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "message" : { "type" : "string" }
                  },
                  "example" : {
                    "message" : "No valid MIME Type for content"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizers/organizer/all":{
        "get" : {
        "tags" : ["Organizers"],
        "summary" : "Get all Organizers",
        "description" : "All Organizers in platform",
        "responses" : {
          "200" : {
            "description" : "Succesful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "IdAuth" : { "type" : "integer", "description" : "ID in the Auth Service"  },
                    "Name" :  { "type" : "string", "description" : "Name of the Organizer"  },
                    "Lastname" : { "type" : "string", "description" : "Lastname of the Organizer"  },
                    "fecha_nacimiento" : { "type" : "string", "format" : "date" ,"description" : "Date of birth of the Organizer"  },
                    "genero" : { "type" : "string", "description" : "The gender of the Organizer"  },
                    "description" : { "type" : "string", "description" : "A description of the Organizer"  },
                    "pais" : { "type" : "string", "description" : "Country of the Organizer"  },
                    "ciudad" : { "type" : "string", "description" : "City of the Organizer"  },
                    "Nombre_Empresa" : { "type" : "string", "description" : "Organizing company name"},
                    "description_enterprise" : {"type" : "string", "description" : "description of the organizer's company"},
                    "url_foto_perfil" : { "type" : "string", "description" : "URL for the profile img of the Organizer"},
                    "redes_sociales" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "nombre" : { "type" : "string" , "description" : "Name of the Social media" },
                          "url" : { "type" : "string", "description" : "URL to the Social Media" }
                        }
                      },
                      "description" : "An Array with the url for the videos of the Organizer "
                    },
                    "telefono" : { "type" : "string" , "description" : "Phone of the Organizer" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizers/organizer/{id}" : {
      "get" : {
        "tags" : ["Organizers"],
        "summary": "Get a Organizer by his Id",
        "description": "Get One Organizer with his ObjectID",
        "parameters": [
          {
            "in": "path",
            "name" : "id",
            "schema" : {
              "type": "string" 
            },
            "required": true
          }
        ],
        "responses": {
          "200" : {
            "description" : "Succesful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "IdAuth" : { "type" : "integer", "description" : "ID in the Auth Service"  },
                    "Name" :  { "type" : "string", "description" : "Name of the Organizer"  },
                    "Lastname" : { "type" : "string", "description" : "Lastname of the Organizer"  },
                    "fecha_nacimiento" : { "type" : "string", "format" : "date" ,"description" : "Date of birth of the Organizer"  },
                    "genero" : { "type" : "string", "description" : "The gender of the Organizer"  },
                    "description" : { "type" : "string", "description" : "A description of the Organizer"  },
                    "pais" : { "type" : "string", "description" : "Country of the Organizer"  },
                    "ciudad" : { "type" : "string", "description" : "City of the Organizer"  },
                    "Nombre_Empresa" : { "type" : "string", "description" : "Organizing company name"},
                    "description_enterprise" : {"type" : "string", "description" : "description of the organizer's company"},
                    "url_foto_perfil" : { "type" : "string", "description" : "URL for the profile img of the Organizer"},
                    "redes_sociales" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "nombre" : { "type" : "string" , "description" : "Name of the Social media" },
                          "url" : { "type" : "string", "description" : "URL to the Social Media" }
                        }
                      },
                      "description" : "An Array with the url for the videos of the Organizer"
                    },
                    "telefono" : { "type" : "string" , "description" : "Phone of the Organizer" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizers/Organizer": {
      "get" : {
        "tags" : ["Organizers"],
        "summary" : "Organizers Login",
        "description" : "The GET route verifies access permission with an authentication token. If the permission is valid, it returns information about a Organizers. If not, it returns an error message",
        "responses" : {
          "200" : {
            "description" : "Succesful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "IdAuth" : {"type" : "integer", "description" : "ID in the Auth Service"},
                    "Name" : {"type" : "string", "description" : "The name of the instrument"},
                    "Lastname" : {"type" : "string", "description" : "Lastname of the Organizer"},
                    "telefono" : {"type" : "string" , "description" : "Phone of the Organizer"},
                    "Nombre_Empresa" : {"type" : "string", "description" : "Name of the enterprise"},
                    "description_enterprise" : {"type" : "string", "description" : "creation date of the enterprise"},
                    "pais" : {"type" : "string", "description" : "Country of the organizer"}, 
                    "fecha_nacimiento" : {"type" : "string", "format" : "date"}, 
                    "genero" : {"type" : "string", "description" : "The gender of the organizer"},
                    "ciudad" : {"type" : "string", "description": "City of the Organizer"},
                    "url_foto_perfil" : {"type":"string","description":"URL for the profile img of the Musician"},
                    "redes_sociales" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "nombre" : { "type" : "string" , "description" : "Name of the Social media" },
                          "url" : { "type" : "string", "description" : "URL to the Social Media" }  
                        }
                      }
                    }
                  }  
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : ["Organizers"],
        "summary" : "Organizers post",
        "description" : "The POST route verifies access permission with an authentication token. If the permission is valid, it post information about a Organizers. If not, it returns an error message",
        "responses" : {
          "200" : {
            "description" : "Succesful Post",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "IdAuth" : {"type" : "integer", "description" : "ID in the Auth Service"},
                    "Name" : {"type" : "string", "description" : "Name of the Musician"},
                    "Lastname" : {"type" : "string", "description" : "Lastname of the Musician"},
                    "fecha_nacimiento" : {"type" : "string", "format" : "date" ,"description" : "Date of birth of the Musician"},
                    "instrumentos" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "nombre" : {"type" : "string", "description" : "The name of the instrument"},
                          "nivel" : {"type" : "string", "description" : "A description of the Musician level on that one instrument"}
                        }
                      },
                      "description" : "An array of the Instruments that the Musician knows to play"
                    },
                    "genero" : {"type" : "string", "description" : "The gender of the Musician"},
                    "description" : {"type" : "string", "description" : "A description of the Musician"},
                    "generosMusicales" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "An array with the Musician genres that the Musician knows to play"
                    },
                    "pais" : {"type" : "string", "description" : "Country of the Musician"},
                    "ciudad" : {"type" : "string", "description" : "City of the Musician" },
                    "experiencia" : {"type" : "string", "description" : "A Description of the general experience in Music of the Musician"},
                    "educacion" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "nombre" : {"type" : "string", "description" : "Name of the degree"},
                          "institucion" : {"type" : "string", "description" : "Name of the institutin where the Musician did the degree"},
                          "fecha_inicio" : { "type" : "string", "format" : "date", "description" : "Date when the Musician started to study the degree"  },
                          "fecha_fin" : { "type" : "string", "format" : "date", "description" : "Date when the Musician finished the degree" }
                        }
                      }
                    },
                    "url_foto_perfil" : {"type":"string","description":"URL for the profile img of the Musician"},
                    "url_video_presentacion" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "An Array with the url for the videos of the Musician"
                    },
                    "redes_sociales" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "nombre" : { "type" : "string" , "description" : "Name of the Social media" },
                          "url" : { "type" : "string", "description" : "URL to the Social Media" } 
                        }
                      },
                      "description" : "An Array with the url for the videos of the Musician"
                    },
                    "telefono" : {"type" : "string", "description" : "Phone of the Musician"}
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" :["Organizers"],
        "summary" : "Musician delete",
        "description" : "The PUT route verifies the access permission with an auth token and the id. If the permission is valid, it will delete the musician",
        "responses" : {
          "200" : {
            "description" : "Succesful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "IdAuth" : {"type" : "integer", "description" : "ID in the Auth Service"}
                  }
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : ["Organizers"],
        "summary" : "Musician Put",
        "description" : "The PUT route verifies access permission with an authentication token. If the permission is valid, it update information about a musician. If not, it returns an error message",
        "parameters" : [
          {
            "name" : "token",
            "in" : "query",
            "schema" : {
              "type": "string"
            }
          }
        ],
        "responses" : {
          "401" : {
            "description" : "Invalid Cookies or Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "token" : {"type" : "string"},
                    "message" : {"type" : "string"}
                  },
                  "example" : {
                    "token" : "",
                    "message" : "Invalid Cookies"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizers/Organizer/profile" : {
      "post" : {
        "tags" : ["Organizers"],
        "summary" : "Post organizer's profile",
        "description" : "This route requires Auth Token in headers and multipart/form-data mimetype in Headers also. Send a tuple with only one value: key of the image and the file in the body (the key can be whatever, it doesn't affect the process). \n Also can take several seconds or even minutes to response.",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" :"array",
                  "items" : {}
                }
              }
            }
          }
        },
        "responses": {
          "200" : {
            "description": "Succesful profile Upload or Update of the Organizer",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "message" : { "type": "string" }
                  },
                  "example" : {
                    "message" : "Foto de perfil actualizada correctamente"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "MIME Type Erro or not authorized Rol",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "message" : { "type" : "string" }
                  },
                  "example" : {
                    "message" : "No valid MIME Type for content"
                  }
                }
              }
            }
          }
        }
      }
    },  
    "/mailer": {
      "post":{
        "tags": ["Mailer"],
        "summary": "Send Mails",
        "description": "Send mail on application to an offer to the applicant",
       "requestBody": {
          "description": "The requested data to send the mail to the applicant",
          "content": {
            "application/json": {
              "schema": {
                "type":"object",
                "properties": {
                  "ReceiverEmail": {"type": "string"},
                  "ReceiverName": {"type": "string"}, 
                  "OfferID": {"type": "string"},
                  "OfferTitle": {"type": "string"},
                  "OrganizerName": {"type": "string"},
                  "OrganizerId": {"type": "string"},
                  "EntrepriseName": {"type": "string"}
                },
                "required": ["ReceiverEmail", "ReceiverName", "OfferID", "OfferTitle", "OrganizerName", "OrganizerId", "EntrepriseName"]
              },
              "examples": {
                "mail": {
                  "summary": "Mail to applicant example",
                  "value": {
                    "ReceiverEmail": "you@email.com",
                    "ReceiverName": "Your Name", 
                    "OfferID": "1",
                    "OfferTitle": "Your offer's title",
                    "OrganizerName": "organizer name",
                    "OrganizerId": "1",
                    "EntrepriseName": "Cool Enterprise Name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Aplicacion correcta",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {"type": "string"}
                  },
                  "example":{
                    "message": "Aplicacion correcta"
                  }
                }
              }
            }
          },
          "400": {
            "description" : "Fields missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "statusCode": {"type": "integer"},
                    "error": {"type": "string"},
                    "message": {"type": "string"}
                  },
                  "example" : {
                      "statusCode": 400,
                      "error": "Bad Request",
                      "message": "Expected double-quoted property name in JSON at position 169"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mailer/organizer": {
      "post":{
        "tags": ["Mailer"],
        "summary": "Send Mails",
        "description": "Send mail on application to an offer to the organizer",
       "requestBody": {
          "description": "The requested data to send the mail to the organizer",
          "content": {
            "application/json": {
              "schema": {
                "type":"object",
                "properties": {
                  "ReceiverEmail": {"type": "string"},
                  "OfferID": {"type": "string"},
                  "OfferTitle": {"type": "string"},
                  "ApplicantId": {"type": "string"},
                  "ApplicantName": {"type": "string"},
                  "ApplicantEmail": {"type": "string"}
                },
                "required": ["ReceiverEmail", "OfferID", "OfferTitle", "ApplicantId", "ApplicantName, ApplicantEmail"]
              },
              "examples": {
                "mail": {
                  "summary": "Mail to organizer example",
                  "value": {
                    "ReceiverEmail": "you@email.com",
                    "OfferID": "1",
                    "OfferTitle": "Your offer's title",
                    "ApplicantId": "1",
                    "ApplicantName": "Some name",
                    "ApplicantEmail": "another@email.com"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Aplicacion correcta",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {"type": "string"}
                  },
                  "example":{
                    "message": "Alguien a aplicado a tu oferta de empleo"
                  }
                }
              }
            }
          },
          "400": {
            "description" : "Fields missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "statusCode": {"type": "integer"},
                    "error": {"type": "string"},
                    "message": {"type": "string"}
                  },
                  "example" : {
                      "statusCode": 400,
                      "error": "Bad Request",
                      "message": "Expected double-quoted property name in JSON at position 169"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mailer/verify": {
      "post":{
        "tags": ["Mailer"],
        "summary": "Send Mails",
        "description": "Send mail to the user to verify account",
        "requestBody": {
          "description": "The requested data to send the mail to the user",
          "content": {
            "application/json": {
              "schema": {
                "type":"object",
                "properties": {
                  "UserName": {"type": "string"},
                  "ReceiverEmail": {"type": "string"},
                  "URL": {"type": "string"}
                },
                "required": ["ReceiverEmail", "OfferID", "OfferTitle", "ApplicantId", "ApplicantName, ApplicantEmail"]
              },
              "examples": {
                "mail": {
                  "summary": "Mail to organizer example",
                  "value": {
                    "UserName": "Some name",
                    "ReceiverEmail": "some@email.com",
                    "URL": "www.nodens.netlify.app"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Verificar email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {"type": "string"}
                  },
                  "example":{
                    "message": "Verifica tu email"
                  }
                }
              }
            }
          },
          "400": {
            "description" : "Fields missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "statusCode": {"type": "integer"},
                    "error": {"type": "string"},
                    "message": {"type": "string"}
                  },
                  "example" : {
                      "statusCode": 400,
                      "error": "Bad Request",
                      "message": "Expected double-quoted property name in JSON at position 169"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mailer/recovery": {
      "post":{
        "tags": ["Mailer"],
        "summary": "Send Mails",
        "description": "Send mail to the user recover the password",
        "requestBody": {
          "description": "The requested data to send the mail to the user",
          "content": {
            "application/json": {
              "schema": {
                "type":"object",
                "properties": {
                  "UserName": {"type": "string"},
                  "ReceiverEmail": {"type": "string"},
                  "URL": {"type": "string"}
                },
                "required": ["ReceiverEmail", "OfferID", "OfferTitle", "ApplicantId", "ApplicantName, ApplicantEmail"]
              },
              "examples": {
                "mail": {
                  "summary": "Mail to recover password",
                  "value": {
                    "UserName": "Some name",
                    "ReceiverEmail": "some@email.com",
                    "URL": "www.nodens.netlify.app"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Recuperar contraseña",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {"type": "string"}
                  },
                  "example":{
                    "message": "Recupera tu contraseña"
                  }
                }
              }
            }
          },
          "400": {
            "description" : "Fields missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "statusCode": {"type": "integer"},
                    "error": {"type": "string"},
                    "message": {"type": "string"}
                  },
                  "example" : {
                      "statusCode": 400,
                      "error": "Bad Request",
                      "message": "Expected double-quoted property name in JSON at position 169"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/offers/offers" : {
      "get" : {
        "tags": ["Offers"],
        "summary": "Get all the Offers",
        "description": "Route to get all the Offers. \n This route doesn't give the Applicants, the Applicants are only visible for Organizer",
        "responses": {
          "200" : {
            "description": "All the offers",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "array",
                  "items" : {
                    "type": "object",
                    "properties": {
                      "Title" : { "type": "string" },
                      "Description" : { "type": "string" },
                      "Creation_Date" : { "type": "string", "format": "date" },
                      "Event_Date" : { "type": "string", "format": "date" },
                      "Payment" : { "type": "number" },
                      "OrganizerId" : { "type": "number" },
                      "Event_Ubication" : {
                        "type": "object",
                        "properties": {
                          "City" :  { "type": "string" },
                          "Street" : { "type" : "string" },
                          "Career" : { "type" : "string" },
                          "SiteNumber" : { "type" : "string" },
                          "Town" : { "type" : "string" }
                        },
                        "required": ["City", "SiteNumber", "Town"]
                      },
                      "Img" : { "type" : "string" },
                      "Requeriments" : {
                        "type": "array",
                        "items" : {
                          "type": "object",
                          "properties": {
                            "Description" : { "type" : "string" }
                          },
                          "required": ["Description"]
                        }
                      },
                      "Vacants" : { "type" : "number" },
                      "isAvailable" : { "type" : "boolean" },
                      "tags" : { "type": "array", "items" : { "type": "string" } }
                    },
                    "required": ["Title", "Description", "Creation_Date", "Event_Date", "Payment", "OrganizerId", "Event_Ubication", "Applicants", "Img", "Requeriments", "isAvailable", "tags"]
                  }
                },
                "example" : {
                  "Title": "Una oferta",
                  "Description": "No sé",
                  "Creation_Date": "2023-05-11T02:07:05.128Z",
                  "Event_Date": "2023-05-20T19:07:00.000Z",
                  "Payment": 4000,
                  "OrganizerId": 18,
                  "Event_Ubication": {
                    "City": "Armenia",
                    "SiteNumber": "10-11",
                    "Town": "El Granada"
                  },
                  "Img": "si",
                  "Requeriments": [
                    {
                      "Description": "3 años de experiencia en congas"
                    }
                  ],
                  "Vacants": 3,
                  "isAvailable": false,
                  "tags": [
                    "una tag"
                  ]
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags": ["Offers"],
        "summary": "Get all the offers that match with request body tags",
        "description": "This route give a response with all the offers where it tags matche with request body tags",
        "requestBody" : {
          "description": "Body with tags",
          "content": {
            "application/json" : {
              "schema" : {
                "type": "object",
                "properties": {
                  "Tags" : { "type": "array", "items" : { "type": "string" } }
                },
                "required": ["Tags"]
              }
            }
          }
        },
        "responses": {
          "200" : {
            "description": "Offers with x tags",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "array",
                  "items" : {
                    "type": "object",
                    "properties": {
                      "Title" : { "type": "string" },
                      "Description" : { "type": "string" },
                      "Creation_Date" : { "type": "string", "format": "date" },
                      "Event_Date" : { "type": "string", "format": "date" },
                      "Payment" : { "type": "number" },
                      "OrganizerId" : { "type": "number" },
                      "Event_Ubication" : {
                        "type": "object",
                        "properties": {
                          "City" :  { "type": "string" },
                          "Street" : { "type" : "string" },
                          "Career" : { "type" : "string" },
                          "SiteNumber" : { "type" : "string" },
                          "Town" : { "type" : "string" }
                        },
                        "required": ["City", "SiteNumber", "Town"]
                      },
                      "Img" : { "type" : "string" },
                      "Requeriments" : {
                        "type": "array",
                        "items" : {
                          "type": "object",
                          "properties": {
                            "Description" : { "type" : "string" }
                          },
                          "required": ["Description"]
                        }
                      },
                      "Vacants" : { "type" : "number" },
                      "isAvailable" : { "type" : "boolean" },
                      "tags" : { "type": "array", "items" : { "type": "string" } }
                    },
                    "required": ["Title", "Description", "Creation_Date", "Event_Date", "Payment", "OrganizerId", "Event_Ubication", "Applicants", "Img", "Requeriments", "isAvailable", "tags"]
                  }
                },
                "example" : {
                  "Title": "Una oferta",
                  "Description": "No sé",
                  "Creation_Date": "2023-05-11T02:07:05.128Z",
                  "Event_Date": "2023-05-20T19:07:00.000Z",
                  "Payment": 4000,
                  "OrganizerId": 18,
                  "Event_Ubication": {
                    "City": "Armenia",
                    "SiteNumber": "10-11",
                    "Town": "El Granada"
                  },
                  "Img": "si",
                  "Requeriments": [
                    {
                      "Description": "3 años de experiencia en congas"
                    }
                  ],
                  "Vacants": 3,
                  "isAvailable": false,
                  "tags": [
                    "una tag"
                  ]
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags": ["Offers"],
        "summary": "Create an Offer",
        "description": "Createn Offer, this route requires Auth token in Headers",
        "requestBody" : {
          "description": "Body with the Offer",
          "content": {
            "application/json" : {
              "schema" : {
                  "type" : "object",
                  "properties" : {
                    "Title" : { "type" : "string" },
                    "Description" : { "type" : "string" },
                    "Creation_Date" : { "type" : "string", "format" : "date-time" },
                    "Event_Date" : { "type" : "string", "format" : "date-time" },
                    "Payment" : { "type" : "integer" },
                    "OrganizerId" : { "type" : "integer" },
                    "Event_Ubication" : { 
                        "type" : "object",
                        "properties" : {
                            "Career" : { "type" : "string" },
                            "Street" : { "type" : "string" },
                            "City" : { "type" : "string" },
                            "SiteNumber" : { "type" : "string" },
                            "Town" : { "type" : "string" }
                        },
                        "required" : ["City", "Town", "SiteNumber"]
                    },
                    "Img" : { "type" : "string" },
                    "Requeriments" : {
                        "type" : "array",
                        "items" : {
                            "type" : "object",
                            "properties" : {
                                "Description" : { "type" : "string" }
                            },
                            "required" : ["Description"]
                        },
                        "minItems" : 1
                    },
                    "Vacants" : { "type" : "integer" },
                    "isAvailable" : { "type" : "boolean" },
                    "tags" : { "type" : "array", "items" : { "type" : "string" } }
                },
                "required" : ["Title", "Description", "Vacants", "isAvailable", "Event_Date", "Payment", "Event_Ubication", "Requeriments", "tags"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200" : {
            "description": "Offer posted Succesfully",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "message" : { "type": "string" }
                  }
                },
                "example" : {
                  "message" : "Oferta creada correctamente"
                }
              }
            }
          },
          "500" : {
            "description": "Unexpected error",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "err" : {"type": "string"}
                  }
                }
              }
            }
          },
          "400" : {
            "description": "Validation Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "statusCode" : { "type": "number" },
                    "error" : { "type": "string" },
                    "message" : { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/offers/offers/organizer" : {
      "get" : {
        "tags": ["Offers"],
        "summary": "Get offers that an Organizer posted (requires Auth token in headers)",
        "description": "This route get the Offers that an Organizer posted, requires Auth token from an Organizer's session and all the offers have the Applicants field",
        "responses": {
          "200" : {
            "description": "Offers by the Organizer",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                        "Title" : { "type" : "string" },
                        "Description" : { "type" : "string" },
                        "Creation_Date" : { "type" : "string", "format" : "date-time" },
                        "Event_Date" : { "type" : "string", "format" : "date-time" },
                        "Payment" : { "type" : "integer" },
                        "OrganizerId" : { "type" : "integer" },
                        "Event_Ubication" : { 
                            "type" : "object",
                            "properties" : {
                                "Career" : { "type" : "string" },
                                "Street" : { "type" : "string" },
                                "City" : { "type" : "string" },
                                "SiteNumber" : { "type" : "string" },
                                "Town" : { "type" : "string" }
                            },
                            "required" : ["City", "Town", "SiteNumber"]
                        },
                        "Applicants" : {
                            "type" : "array",
                            "items" : {
                                "type" : "object",
                                "properties" : {
                                    "ApplicantId" : { "type" : "string" },
                                    "PostulationDate" : { "type" : "string", "format" : "date" },
                                    "PostulationFullName" : { "type" : "string", "format" : "date" },
                                    "PostulationStatus" : { "type" : "string", "enum" : ["aplied", "evaluated", "acepted"] }
                                },
                                "required" : ["ApplicantId", "PostulationDate", "PostulationFullName", "PostulationStatus"]
                            },
                            "minItems" : 0
                        },
                        "Img" : { "type" : "string" },
                        "Requeriments" : {
                            "type" : "array",
                            "items" : {
                                "type" : "object",
                                "properties" : {
                                    "Description" : { "type" : "string" }
                                },
                                "required" : ["Description"]
                            },
                            "minItems" : 1
                        },
                        "Vacants" : { "type" : "integer" },
                        "isAvailable" : { "type" : "boolean" },
                        "tags" : { "type" : "array", "items" : { "type" : "string" } }
                    },
                    "required" : ["Title", "Description", "Vacants", "isAvailable", "Event_Date", "Payment", "Event_Ubication", "Requeriments", "tags"]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/offers/offers/musician" : {
      "get" : {
        "tags": ["Offers"],
        "summary": "Get offers that an Musicians postulated (requires Auth token in headers)",
        "description": "This route get the Offers that an Musician postulated, requires Auth token from an Musician's session and the offers doesn't give the Applicants field",
        "responses": {
          "200" : {
            "description": "Offers Postulated by a Musician",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                        "Title" : { "type" : "string" },
                        "Description" : { "type" : "string" },
                        "Creation_Date" : { "type" : "string", "format" : "date-time" },
                        "Event_Date" : { "type" : "string", "format" : "date-time" },
                        "Payment" : { "type" : "integer" },
                        "OrganizerId" : { "type" : "integer" },
                        "Event_Ubication" : { 
                            "type" : "object",
                            "properties" : {
                                "Career" : { "type" : "string" },
                                "Street" : { "type" : "string" },
                                "City" : { "type" : "string" },
                                "SiteNumber" : { "type" : "string" },
                                "Town" : { "type" : "string" }
                            },
                            "required" : ["City", "Town", "SiteNumber"]
                        },
                        "Img" : { "type" : "string" },
                        "Requeriments" : {
                            "type" : "array",
                            "items" : {
                                "type" : "object",
                                "properties" : {
                                    "Description" : { "type" : "string" }
                                },
                                "required" : ["Description"]
                            },
                            "minItems" : 1
                        },
                        "Vacants" : { "type" : "integer" },
                        "isAvailable" : { "type" : "boolean" },
                        "tags" : { "type" : "array", "items" : { "type" : "string" } }
                    },
                    "required" : ["Title", "Description", "Vacants", "isAvailable", "Event_Date", "Payment", "Event_Ubication", "Requeriments", "tags"]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/offers/offers/{id}" : {
      "get" : {
        "summary": "Get single offer",
        "description": "Get single offer by an Id, this doesn't have the Applicants field",
        "tags": ["Offers"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema" : {
              "type": "string"
            },
            "required": true,
            "description": "Object Id of the Offer"
          }
        ],
        "responses": {
          "200" : {
            "description": "The Single Offer",
            "content": {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                      "Title" : { "type" : "string" },
                      "Description" : { "type" : "string" },
                      "Creation_Date" : { "type" : "string", "format" : "date-time" },
                      "Event_Date" : { "type" : "string", "format" : "date-time" },
                      "Payment" : { "type" : "integer" },
                      "OrganizerId" : { "type" : "integer" },
                      "Event_Ubication" : { 
                          "type" : "object",
                          "properties" : {
                              "Career" : { "type" : "string" },
                              "Street" : { "type" : "string" },
                              "City" : { "type" : "string" },
                              "SiteNumber" : { "type" : "string" },
                              "Town" : { "type" : "string" }
                          },
                          "required" : ["City", "Town", "SiteNumber"]
                      },
                      "Img" : { "type" : "string" },
                      "Requeriments" : {
                          "type" : "array",
                          "items" : {
                              "type" : "object",
                              "properties" : {
                                  "Description" : { "type" : "string" }
                              },
                              "required" : ["Description"]
                          },
                          "minItems" : 1
                      },
                      "Vacants" : { "type" : "integer" },
                      "isAvailable" : { "type" : "boolean" },
                      "tags" : { "type" : "array", "items" : { "type" : "string" } }
                  },
                  "required" : ["Title", "Description", "Vacants", "isAvailable", "Event_Date", "Payment", "Event_Ubication", "Requeriments", "tags"]
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags": ["Offers"],
        "summary": "Postulate a Musician",
        "description": "This route is Musicians Only, it's for postulate a Musician to an Offer so the Organizer can see him/her",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema" : {
              "type": "string"
            },
            "required": true,
            "description": "Object Id of the Offer"
          }
        ],
        "requestBody" : {
          "description": "The body to Postulate a Musician",
          "content": {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                    "PostulationDate" : { "type" : "string", "format" : "date" },
                    "PostulationFullName" : { "type" : "string" }
                },
                "required" : [ "PostulationDate", "PostulationFullName"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "500" : {
            "description": "Any error",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "err" : {"type": "string"}
                  }
                },
                "example" : {
                  "err" : "El organizador no existe"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary": "Delete an Offer",
        "description": "Delete an Offer made by the Organizer's session",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema" : {
              "type": "string"
            },
            "required": true,
            "description": "Object Id of the Offer"
          }
        ],
        "tags": ["Offers"],
        "responses": {
          "200" : {
            "description": "Offer successfully deleted",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "message" : { "type": "string" }
                  }
                }
              }
            }
          },
          "500" : {
            "description": "Error deleting the offer",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "message" : { "type": "string" },
                    "statusCode" : { "type": "integer" },
                    "error" : { "type": "string" }
                  }
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags": ["Offers"],
        "summary": "Disable an Offer",
        "description": "This route is only for Organizers, here the organizer disable an Offer. Requires Auth token.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema" : {
              "type": "string"
            },
            "required": true,
            "description": "Object Id of the Offer"
          }
        ],
        "responses": {
          "200" : {
            "description": "Offer disabled Succesfully",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "message" : { "type": "string" }
                  }
                }
              }
            }
          },
          "500" : {
            "description": "Error disabling the offer",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "message" : { "type": "string" },
                    "statusCode" : { "type": "integer" },
                    "error" : { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/offers/offers/changestatus" : {
      "patch" : {
        "summary": "Change Postulation Status",
        "description": "This route is for Organizers only, here the organizer change the postulation status: 'aplied', 'evaluated', 'acepted'",
        "tags": ["Offers"],
        "requestBody" : {
          "required": true,
          "description": "Request body with the id of the Applicant, id of the Offer and the (enum) action",
          "content": {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                    "OfferId" : { "type" : "string" },
                    "ApplicantId"  : { "type" : "string" },
                    "Action" : { "type" : "string", "enum" : ["aplied", "evaluated", "acepted"] }
                },
                "required" : ["OfferId", "Action", "ApplicantId"]
              }
            }
          }
        },
        "responses": {
          "200" : {
            "description": "Postulation changed successfully",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "message" : { "type": "string" }
                  }
                }
              }
            }
          },
          "500" : {
            "description": "Error changing the postulation state",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "message" : { "type": "string" },
                    "statusCode" : { "type": "integer" },
                    "error" : { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts/posts/" : {
      "get" : {
        "summary": "Get All posts",
        "description": "This route Get all posts, you don't require the JWT Token for this",
        "tags": ["Posts"],
        "responses": {
          "200" : {
            "description": "Array with the Posts",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "array",
                  "items" : {
                    "type": "object",
                    "properties": {
                      "id" : { "type": "string" },
                      "user_id" : { "type": "string" },
                      "title" : { "type": "string" },
                      "text" : { "type": "string" },
                      "links" : { "type": "array", "items" : { "type": "string" } },
                      "images" : { "type": "array", "items" : { "type": "string" } },
                      "Date" : { "type": "string", "format": "date" },
                      "likes" : { 
                        "type": "array", 
                        "items" : { 
                          "type": "object",
                          "properties": {
                            "user_id" : { "type": "string" }
                          } 
                        } 
                      },
                      "comments" : { 
                        "type": "array", 
                        "items" : { 
                          "type": "object",
                          "properties": {
                            "comment_id" : { "type": "string" },
                            "user_id" : { "type": "string" },
                            "text" : { "type": "string" },
                            "links" : { "type": "array", "items" : { "type": "string" } },
                            "images" : { "type": "array", "items" : { "type": "string" } },
                            "Responses" : { "type": "array", "items" : { "type": "object", "description": "Here there is an array with embebed comments as Responses to the parent comment" } }
                          } 
                        } 
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts/posts/creator/{creatorId}" : {
      "get" : {
        "tags": ["Posts"],
        "summary": "Get Posts by a Cerator Id, here you don't need the JWT Token",
        "description": "This route get the posts created by an user who's id is in the request params",
        "parameters": [
          {
            "in": "path",
            "name": "creatorId",
            "schema" : {
              "type": "string"
            },
            "required": true,
            "description": "Object Id of the poster"
          }
        ],
        "responses": {
          "200" : {
            "description": "Array with the Posts",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "array",
                  "items" : {
                    "type": "object",
                    "properties": {
                      "id" : { "type": "string" },
                      "user_id" : { "type": "string" },
                      "title" : { "type": "string" },
                      "text" : { "type": "string" },
                      "links" : { "type": "array", "items" : { "type": "string" } },
                      "images" : { "type": "array", "items" : { "type": "string" } },
                      "Date" : { "type": "string", "format": "date" },
                      "likes" : { 
                        "type": "array", 
                        "items" : { 
                          "type": "object",
                          "properties": {
                            "user_id" : { "type": "string" }
                          } 
                        } 
                      },
                      "comments" : { 
                        "type": "array", 
                        "items" : { 
                          "type": "object",
                          "properties": {
                            "comment_id" : { "type": "string" },
                            "user_id" : { "type": "string" },
                            "text" : { "type": "string" },
                            "links" : { "type": "array", "items" : { "type": "string" } },
                            "images" : { "type": "array", "items" : { "type": "string" } },
                            "Responses" : { "type": "array", "items" : { "type": "object", "description": "Here there is an array with embebed comments as Responses to the parent comment" } }
                          } 
                        } 
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts/posts/user" : {
      "get" : {
        "tags": ["Posts"],
        "summary": "Get the posts published by an user",
        "description": "This route only requires JWT Token in headers, will get the posts by Token User",
        "responses": {
          "200" : {
            "description": "Array with the Posts",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "array",
                  "items" : {
                    "type": "object",
                    "properties": {
                      "id" : { "type": "string" },
                      "user_id" : { "type": "string" },
                      "title" : { "type": "string" },
                      "text" : { "type": "string" },
                      "links" : { "type": "array", "items" : { "type": "string" } },
                      "images" : { "type": "array", "items" : { "type": "string" } },
                      "Date" : { "type": "string", "format": "date" },
                      "likes" : { 
                        "type": "array", 
                        "items" : { 
                          "type": "object",
                          "properties": {
                            "user_id" : { "type": "string" }
                          } 
                        } 
                      },
                      "comments" : { 
                        "type": "array", 
                        "items" : { 
                          "type": "object",
                          "properties": {
                            "comment_id" : { "type": "string" },
                            "user_id" : { "type": "string" },
                            "text" : { "type": "string" },
                            "links" : { "type": "array", "items" : { "type": "string" } },
                            "images" : { "type": "array", "items" : { "type": "string" } },
                            "Responses" : { "type": "array", "items" : { "type": "object", "description": "Here there is an array with embebed comments as Responses to the parent comment" } }
                          } 
                        } 
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts/posts/new" : {
      "post" : {
        "tags": ["Posts"],
        "summary": "Publish a new Post",
        "description": "Create a new Post, require the JWT Token in headers",
        "requestBody" : {
          "description": "New Post",
          "required": true,
          "content": {
            "application/json" : {
              "schema" : {
                "type": "object",
                "properties": {
                  "title" : { "type": "string" },
                  "text" : { "type": "string" },
                  "links" : { "type": "array", "items": { "type": "string" } },
                  "images" : { "type": "array", "items": { "type": "string" } },
                  "Date" : { "type": "string", "format": "date" },
                  "likes" : { "type": "array", "items": { "type": "string" } },
                  "comments" : { 
                      "type": "array", 
                      "items" : { 
                      "type": "object",
                      "properties": {
                        "comment_id" : { "type": "string" },
                        "user_id" : { "type": "string" },
                        "text" : { "type": "string" },
                        "links" : { "type": "array", "items" : { "type": "string" } },
                        "images" : { "type": "array", "items" : { "type": "string" } },
                        "Responses" : { "type": "array", "items" : { "type": "object", "description": "Here there is an array with embebed comments as Responses to the parent comment" } }
                      },
                      "required": ["comment_id", "user_id", "text", "links", "images", "Responses"]
                    } 
                  }
                },
                "required": ["title", "text", "links", "images", "Date", "likes", "comments"]
              }
            }
          }
        },
        "responses": {
          "200" : {
            "description": "Post Created Succesfully",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "id" : { "type": "string" },
                    "user_id" : { "type": "string" },
                    "title" : { "type": "string" },
                    "text" : { "type": "string" },
                    "links" : { "type": "array", "items" : { "type": "string" } },
                    "images" : { "type": "array", "items" : { "type": "string" } },
                    "Date" : { "type": "string", "format": "date" },
                    "likes" : { 
                      "type": "array", 
                      "items" : { 
                        "type": "object",
                        "properties": {
                          "user_id" : { "type": "string" }
                        } 
                      } 
                    },
                    "comments" : { 
                      "type": "array", 
                      "items" : { 
                        "type": "object",
                        "properties": {
                          "comment_id" : { "type": "string" },
                          "user_id" : { "type": "string" },
                          "text" : { "type": "string" },
                          "links" : { "type": "array", "items" : { "type": "string" } },
                          "images" : { "type": "array", "items" : { "type": "string" } },
                          "Responses" : { "type": "array", "items" : { "type": "object", "description": "Here there is an array with embebed comments as Responses to the parent comment" } }
                        } 
                      } 
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description": "Bad Request, This means the Req Body is invalid, in this case check your request body and try again",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "timestamp" : { "type": "string", "format": "datetime" },
                    "status": { "type": "integer"},
                    "error": { "type": "string"},
                    "path": { "type": "string", "format": "path"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts/posts/delete/{id}" : {
      "delete" : {
        "tags": ["Posts"],
        "summary": "Delete a Post by Id",
        "description": "This route require the JWT Token and the Post Id in the request param",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema" : {
              "type": "string"
            },
            "required": true,
            "description": "Object Id of the post"
          }
        ],
        "responses": {
          "200" : {
            "description": "Plain Text with a message, Post deleted Succesfully",
            "content": {
              "text/plain" : {
                "schema" : { "type": "string" }
              }
            }
          },
          "400" : {
            "description": "Bad Request, This means the Req Body is invalid, in this case check your request body and try again",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "timestamp" : { "type": "string", "format": "datetime" },
                    "status": { "type": "integer"},
                    "error": { "type": "string"},
                    "path": { "type": "string", "format": "path"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts/posts/like/add/{id}" : {
      "patch" : {
        "tags": ["Posts"],
        "summary": "Add a Like to a post",
        "description": "Here you register a Like in the post wich id is in the request param, you need the JWT Token here",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema" : {
              "type": "string"
            },
            "required": true,
            "description": "Object Id of the post"
          }
        ],
        "responses": {
          "200" : {
            "description": "Plain Text with a message, Post liked Succesfully",
            "content": {
              "text/plain" : {
                "schema" : { "type": "string" }
              }
            }
          },
          "400" : {
            "description": "Bad Request, This means the Req Body is invalid, in this case check your request body and try again",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "timestamp" : { "type": "string", "format": "datetime" },
                    "status": { "type": "integer"},
                    "error": { "type": "string"},
                    "path": { "type": "string", "format": "path"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts/posts/like/delete/{id}" : {
      "patch" : {
        "tags": ["Posts"],
        "summary": "Delete a Like in a post",
        "description": "Here the user can remove a like of a post, the JWT Token is Necesary",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema" : {
              "type": "string"
            },
            "required": true,
            "description": "Object Id of the comment"
          }
        ],
        "responses": {
          "200" : {
            "description": "Plain Text with a message, Post unliked Succesfully",
            "content": {
              "text/plain" : {
                "schema" : { "type": "string" }
              }
            }
          },
          "400" : {
            "description": "Bad Request, This means the Req Body is invalid, in this case check your request body and try again",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "timestamp" : { "type": "string", "format": "datetime" },
                    "status": { "type": "integer"},
                    "error": { "type": "string"},
                    "path": { "type": "string", "format": "path"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts/posts/liked" : {
      "get" : {
        "tags": ["Posts"],
        "summary": "Get Liked Posts",
        "description": "Get the posts that user liked, this require the JWT Token",
        "responses": {
          "200" : {
            "description": "Array with the Liked Posts",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "array",
                  "items" : {
                    "type": "object",
                    "properties": {
                      "id" : { "type": "string" },
                      "user_id" : { "type": "string" },
                      "title" : { "type": "string" },
                      "text" : { "type": "string" },
                      "links" : { "type": "array", "items" : { "type": "string" } },
                      "images" : { "type": "array", "items" : { "type": "string" } },
                      "Date" : { "type": "string", "format": "date" },
                      "likes" : { 
                        "type": "array", 
                        "items" : { 
                          "type": "object",
                          "properties": {
                            "user_id" : { "type": "string" }
                          } 
                        } 
                      },
                      "comments" : { 
                        "type": "array", 
                        "items" : { 
                          "type": "object",
                          "properties": {
                            "comment_id" : { "type": "string" },
                            "user_id" : { "type": "string" },
                            "text" : { "type": "string" },
                            "links" : { "type": "array", "items" : { "type": "string" } },
                            "images" : { "type": "array", "items" : { "type": "string" } },
                            "Responses" : { "type": "array", "items" : { "type": "object", "description": "Here there is an array with embebed comments as Responses to the parent comment" } }
                          } 
                        } 
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts/posts/comment/{id}" : {
      "patch" : {
        "tags": ["Posts"],
        "summary": "Comment a Post",
        "description": "Here the user can comment a Post",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema" : {
              "type": "string"
            },
            "required": true,
            "description": "Object Id of the post"
          }
        ],
        "requestBody" : {
          "description": "The comment content",
          "content": {
            "application/json" : {
              "schema" : {
                "type": "object",
                "properties": {
                  "text" : { "type": "string" },
                  "links" : { "type": "array", "items" : { "type": "string" } },
                  "images" : { "type": "array", "items" : { "type": "string" } },
                  "responses" : { "type": "array", "items" : { "type": "object" }, "description": "The Responses Array is an array made of this main body" }
                }
              }
            }
          }
        },
        "responses": {
          "200" : {
            "description": "Plain Text with a message, Post Commented Succesfully",
            "content": {
              "text/plain" : {
                "schema" : { "type": "string" }
              }
            }
          },
          "400" : {
            "description": "Bad Request, This means the Req Body is invalid, in this case check your request body and try again",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "timestamp" : { "type": "string", "format": "datetime" },
                    "status": { "type": "integer"},
                    "error": { "type": "string"},
                    "path": { "type": "string", "format": "path"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts/posts/comment/delete/{postid}/{commentid}" : {
      "delete" : {
        "tags": ["Posts"],
        "summary": "Delete a Comment from a Post",
        "description": "Here the user can remove a comment from a Post",
        "parameters": [
          {
            "in": "path",
            "name": "postid",
            "schema" : {
              "type": "string"
            },
            "required": true,
            "description": "Object Id of the Post"
          },
          {
            "in": "path",
            "name": "commentid",
            "schema" : {
              "type": "string"
            },
            "required": true,
            "description": "Object Id of the comment"
          }
        ],
        "responses": {
          "200" : {
            "description": "Plain Text with a message, Comment deleted Succesfully",
            "content": {
              "text/plain" : {
                "schema" : { "type": "string" }
              }
            }
          },
          "400" : {
            "description": "Bad Request, This means the Req Body is invalid, in this case check your request body and try again",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "timestamp" : { "type": "string", "format": "datetime" },
                    "status": { "type": "integer"},
                    "error": { "type": "string"},
                    "path": { "type": "string", "format": "path"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/posts/posts/commented" : {
      "get" : {
        "tags": ["Posts"],
        "summary": "Get posts Commented",
        "description": "Here the user can see which posts did he commented, the JWT is required",
        "responses": {
          "200" : {
            "description": "Array with the Commented Posts",
            "content": {
              "application/json" : {
                "schema" : {
                  "type": "array",
                  "items" : {
                    "type": "object",
                    "properties": {
                      "id" : { "type": "string" },
                      "user_id" : { "type": "string" },
                      "title" : { "type": "string" },
                      "text" : { "type": "string" },
                      "links" : { "type": "array", "items" : { "type": "string" } },
                      "images" : { "type": "array", "items" : { "type": "string" } },
                      "Date" : { "type": "string", "format": "date" },
                      "likes" : { 
                        "type": "array", 
                        "items" : { 
                          "type": "object",
                          "properties": {
                            "user_id" : { "type": "string" }
                          } 
                        } 
                      },
                      "comments" : { 
                        "type": "array", 
                        "items" : { 
                          "type": "object",
                          "properties": {
                            "comment_id" : { "type": "string" },
                            "user_id" : { "type": "string" },
                            "text" : { "type": "string" },
                            "links" : { "type": "array", "items" : { "type": "string" } },
                            "images" : { "type": "array", "items" : { "type": "string" } },
                            "Responses" : { "type": "array", "items" : { "type": "object", "description": "Here there is an array with embebed comments as Responses to the parent comment" } }
                          } 
                        } 
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

